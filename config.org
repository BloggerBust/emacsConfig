* Getting Help
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c h") 'help)
  #+END_SRC
* Custom Minor Modes
  #+BEGIN_SRC emacs-lisp
    (defvar my-keys-minor-mode-map (make-keymap) "my keys")
    (define-minor-mode my-keys-minor-mode 
      "A minor mode for my custom key-maps"
      t " my-keys"
      'my-keys-minor-mode-map)
    (my-keys-minor-mode t)
  #+END_SRC
* Editing
** Functions
  #+BEGIN_SRC emacs-lisp
    (defun select-current-line ()
      "Marks the current line from begining to end and highlights it."
      (interactive)
      (end-of-line)
      (push-mark (line-beginning-position) nil t))

    (defun line-above-current-line ()
      "Creates a new line above the current line."
      (interactive)
      (move-beginning-of-line nil)
      (newline-and-indent)
      (forward-line -1)
      (indent-according-to-mode))
  #+END_SRC
** General
  #+BEGIN_SRC emacs-lisp
    (global-visual-line-mode t) ;; Word wrap

    ;; managing state
    (setq save-place-file (concat user-emacs-directory "saveplace.el")) ;; save file's last point position
    (setq-default save-place t) ;; activate point save position

    ;; line selection
    (delete-selection-mode t) ;; Delete selected text
    (define-key my-keys-minor-mode-map (kbd "M-s l") 'select-current-line)
    (define-key my-keys-minor-mode-map (kbd "M-RET") 'line-above-current-line)

    ;; auto-completion
    (define-key my-keys-minor-mode-map (kbd "M-SPC") 'company-complete) ;; manually invoke auto-complete

    ;; movement
    (define-key my-keys-minor-mode-map (kbd "C-c SPC") 'ace-jump-mode) ;; jump point to line, word, or char

    ;; Indentation
    (electric-indent-mode t) ;; auto-indent
    (setq-default tab-width 2) ;; by default tab will equal 2 spaces
    (setq-default indent-tabs-mode nil) ;; use spaces not tabs

    ;; working with code
    (show-paren-mode t) ;; highlight matching parenthesis

  #+END_SRC
** Javascript
   #+BEGIN_SRC emacs-lisp
     (setq js-indent-level 2) ;; set javascript tab to 2 spaces. It does not use the default.
   #+END_SRC
** Html
   #+BEGIN_SRC emacs-lisp
   (define-key my-keys-minor-mode-map (kbd "C-c w") 'company-web-html)
   #+END_SRC
** Jade
   #+BEGIN_SRC emacs-lisp
   (define-key my-keys-minor-mode-map (kbd "C-c j") 'company-web-jade)
   #+END_SRC
* Emacs Misc
  #+BEGIN_SRC emacs-lisp
    (when (window-system)
      (tool-bar-mode -1)
      (scroll-bar-mode -1))
    (setq inhibit-startup-message t) ;; go straight to scratch buffer on startup
    (fset 'yes-or-no-p 'y-or-n-p) ;; When emacs asks for confirmation we can reply with a y or an n
  #+END_SRC
* Mode line
  #+BEGIN_SRC emacs-lisp
    (setq display-time-day-and-date t)
    (display-time-mode 1)
  #+END_SRC
* Clipboard
  #+BEGIN_SRC emacs-lisp
    (defun copy-to-clipboard()
      (interactive)
      (setq select-enable-clipboard t)
      (kill-ring-save (region-beginning) (region-end))
      (setq select-enable-clipboard nil))

    (defun paste-from-clipboard ()
      (interactive)
      (setq select-enable-clipboard t)
      (yank)
      (setq select-enable-clipboard nil))
  #+END_SRC
* Terminal
  #+BEGIN_SRC emacs-lisp
    (setq explicit-shell-file-name "/bin/bash")

    (defun oleh-term-exec-hook ()
      ;; kill the buffer after existing ansi-term so that the useless buffer is not left open
      (let* ((buff (current-buffer))
             (proc (get-buffer-process buff)))
        (set-process-sentinel
         proc
         `(lambda (process event)
            (if (string= event "finished\n")
                (kill-buffer ,buff))))))

    (add-hook 'term-exec-hook 'oleh-term-exec-hook)
    (eval-after-load "term" '(define-key term-raw-map (kbd "C-c C-y") 'term-paste))
  #+END_SRC
* Auto backups
  #+BEGIN_SRC emacs-lisp
    (setq make-backup-file nil)        ;; don't make the tilda file when I edit a file.
    (setq auto-save-default nil)       ;; don't auto safe my file
    (setq
     backup-by-copying t               ;; don't clobber symlinks
     backup-directory-alist
     '(("." . "~/.emacs.d/.saves"))    ;; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)                ;; use versioned backups
  #+END_SRC
* Helm
  #+BEGIN_SRC emacs-lisp
    ;; I find it is less confusing if ido-mode is disabled when using helm
    (ido-mode -1)
    (helm-mode t)
    ;; projectile is a fabulous way to context switch between projects and to find things in projects
    (projectile-global-mode 1)
    (helm-projectile-on)
    ;; remap some keybindings to use the helm versions
    (global-set-key (kbd "M-x")                          'undefined)
    (global-set-key (kbd "M-x")                          'helm-M-x)
    (global-set-key (kbd "C-x r b")                      'helm-filtered-bookmarks)
    (global-set-key (kbd "C-x C-f")                      'helm-find-files)
  #+END_SRC
* Org-mode
  #+BEGIN_SRC emacs-lisp
    (global-set-key "\C-cl" 'org-store-link)
    (global-set-key "\C-ca" 'org-agenda)
    (global-set-key "\C-cc" 'org-capture)
    (global-set-key "\C-cb" 'org-switchb)
  #+END_SRC
** Editing
   #+BEGIN_SRC emacs-lisp
     ;; org-mode settings
     ;; For some reason this electric-indent fix does not work.
     ;; (add-hook 'org-mode-hook (lamda()
     ;;                                (set (make-local-variable 'electric-indent-functions)
     ;;                                     (list (lamda(arg) 'no-indent))))) ;;disables org-mode indent so that electric-indent can be used.
     (setq org-src-fontify-natively t) ;; org-mode code snippet syntax highlighting
   #+END_SRC
* Company-mode
  #+BEGIN_SRC emacs-lisp
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-tooltip-limit 20)                      ; bigger popup window
    (setq company-tooltip-align-annotations 't)          ; align annotations to the right tooltip border
    (setq company-idle-delay .3)                         ; decrease delay before autocompletion popup shows
    (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
    (global-set-key (kbd "C-c /") 'company-files)        ; Force complete file names on "C-c /" key
  #+END_SRC
** Web-mode
   #+BEGIN_SRC emacs-lisp
     (defun my-web-mode-hook ()
       "Hook for `web-mode'."
       (set (make-local-variable 'company-backends)
            '(company-tern company-web-html company-yasnippet company-files)))

     (add-hook 'web-mode-hook 'my-web-mode-hook)

     ;; Enable JavaScript completion between <script>...</script> etc.
     (defadvice company-tern (before web-mode-set-up-ac-sources activate)
       "Set `tern-mode' based on current language before running company-tern."
       (message "advice")
       (if (equal major-mode 'web-mode)
           (let ((web-mode-cur-language
                  (web-mode-language-at-pos)))
             (if (or (string= web-mode-cur-language "javascript")
                     (string= web-mode-cur-language "jsx")
                     )
                 (unless tern-mode (tern-mode))
               (if tern-mode (tern-mode -1))))))
   #+END_SRC
* Dired-mode
  #+BEGIN_SRC emacs-lisp
    (setq dired-recursive-deletes (quote top)) ;; asks once if you would like to delete a non-empty directory. If you say yes then it will delete all children.
    ;;(define-key dired-mode-map (kbd "f") 'dired-find-alternate-file) ;; default - runs dired-find-file. For some reason I am unable to re-define the f key given the dired-mode-map key-map. Why is this. emacs fails to load when I try. I must investigate this issue.
    ;; (define-key dired-mode-map (kbd "^") 
    ;;   (lambda ()
    ;;     (interactive)
    ;;     (find-alternate-file "..")
    ;;     )
    ;;   )

  #+END_SRC
* rcirc-mode
  #+BEGIN_SRC emacs-lisp
    (set-face-foreground 'rcirc-my-nick "green" nil)
    (setq rcirc-time-format "%Y-%m-%d %H:%M ")
    (rcirc-track-minor-mode 1)
    ;; some channels get a lot of activity. Also, I am usually signed in for weeks at a time so let's keep these buffers from getting to big
    (setq rcirc-buffer-maximum-lines 10000)
  #+END_SRC
** Servers and channels
  #+BEGIN_SRC emacs-lisp
    (setq rcirc-server-alist
          '(("irc.freenode.net" :port 6697 :encryption tls
             :channels ("#emacs" "#gentoo" "#gentoo-chat" "#gentoo-weed" "##infosec" "#infosec" "#friendly-coders" "#hurd"))))

    (add-to-list 'rcirc-server-alist
                 '("irc.oftc.net" :port 6697 :encryption tls
                   :channels ("#kernelnewbies")))

    (add-to-list 'rcirc-server-alist
                 '("irc.mozilla.org" :port 6697 :encryption tls
                   :channels ("#webextensions")))

  #+END_SRC
** Authentication
   At the moment this strategy only works for auto identifying me in freenode. irc.oft.net identify has the nick and password arguments in the opposite order. I expected irc.mozilla.org to work though, but for some reason I am not being auto identified there either. When I have time I will investigate these issues a bit more
   #+BEGIN_SRC emacs-lisp
     (setq rcirc-default-nick "dustfinger")
     (defadvice rcirc (before rcirc-read-from-authinfo activate)
       "Allow rcirc to read authinfo from ~/.authinfo.gpg via the auth-source API.
     This doesn't support the chanserv auth method"
       (unless arg
         (dolist (p (auth-source-search :port '("nickserv")
                                        :require '(:port :user :secret)))
           (let ((secret (plist-get p :secret))
                 (method (intern (plist-get p :port))))
             (add-to-list 'rcirc-authinfo
                          (list (plist-get p :host)
                                method
                                (plist-get p :user)
                                (if (functionp secret)
                                    (funcall secret)
                                  secret)))))))
   #+END_SRC
* comint-mode
  #+BEGIN_SRC emacs-lisp
    (defun node-repl () (interactive)
           (pop-to-buffer (make-comint "node-repl" "node" nil "--interactive"))
           (node-repl))
  #+END_SRC
* Magit
  #+BEGIN_SRC emacs-lisp
    (define-key my-keys-minor-mode-map (kbd "C-c g") 'magit-status)
  #+END_SRC
